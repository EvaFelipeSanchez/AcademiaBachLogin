<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>AcademiaBach</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <link rel="stylesheet" href="/bootstrap-datepicker-master/dist/css/bootstrap-datepicker.css">
    <script src="/bootstrap-datepicker-master/dist/js/bootstrap-datepicker.js"></script>

        <style>
      .sidebaror {
        position: relative;
          transition: 0.3s;
          display: flex;
          flex-direction: column;
          
      }

      .sidebaror img {
            width: 85%;
            height: auto;
            margin-top: 2.5%;
            }

     .sidebar {
          height: 150%;
          width: 9%;
          position: fixed;
          top: 0;
          left: -150%; 
          background-color: #acc1e5;
          transition: 0.3s;

      }

      .sidebar a {
          padding: 7%;
          text-decoration: none;
          font-size: 1vw;
          color: #1c4b6a;
          display: block;
      }

      .sidebar img {
      width: 100%;
      height: auto;

      }

      .sidebar a:hover {
          background-color: #acc1e5;
      }


      .content {
          margin-left: 5%;
          padding: 7%;
      }

      .content a img {
        position: fixed;
        left: 1%;
        top: 1%;
        width: 7%;
        height: auto;
        z-index: 3;
        }

        body {
        background-image: url('/images/Fondo3.png');  
        background-size: cover;               

        margin: 0;
        padding: 0;
        overflow: hidden; 
        display: flex;
        flex-direction: column;
        min-height: 100vh;
        }

        main {
        display: flex;
        flex-direction: column;
        }

        header{
            background-color: rgb(31, 39, 78);
            color: white;
            text-align: center;
            padding: 0.5%;
        
        }

        footer {
            background-color: rgb(31, 39, 78);
            color: white;
            text-align: center;
            padding: 0.5%;
            margin-top: auto;
        }
            
            
        .header-container {
            display: flex;
            align-items: center;
            justify-content: space-between; 
        }
        

        .listaTareas {
            background-color: rgb(163, 186, 217);
            width: 70%;
            max-height: 70vh; 
            overflow-y: auto; 
            height: 100%;
            padding: 1%;
            border: 1px solid #ccc;
            position: fixed;
            top: 55%; 
            left: 50%;
            transform: translate(-50%, -50%); 
            font-family: 'Arial', sans-serif; 
            font-size: 1vw;
            flex-direction: column;
            display: flex;
            
        }

        .listaTareas li {
            list-style-type: none;
            display: flex;
            flex-direction: row; 
            align-items: center;
            margin-bottom: 10%;
            background-color: white; 
            border: 1px solid #ccc;
            padding: 10%;
        }

        .listaTareas input[type="checkbox"] {
            margin-right: 10%;
        }


        .listaTareas input[type="text"] {
            flex: 3;
            padding: 1%;
    
        }

        .nuevaTarea {
         
            position: absolute;
            padding: 10px;
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: center;
            width: 100%;
            left: 34%;
            top: 15%;
            transform: translate(-50%, -50%);
            font-family: 'Arial', sans-serif; 
            font-size: 1vw;
  
        }    
        .nuevaTarea input {
            margin: 0% 0.5% ; 
        }


        #Puntos,
        button {
            width: 6%; 
            height: auto;
        }


        #nuevaTareaInput,
        #fechaVencimiento,
        #TipoDeTarea
         {
            width: 9%; 
            height: auto;
        }

        .row {
            display: flex;
            align-items: center;
            background-color: #fff;
            margin: 0.7% 0%;
        }

        .col {
            padding: 0.5%;
            border: 1px solid #ccc;
            margin-right: 0.7%;
        }

        .col:last-child {
            margin-right: 0%;
        }

        
        .papelera {
             position: fixed;
            display: flex;
            justify-content: center;
            align-items: center;
            top: 13%; 
            left: 85%; 
            transform: translate(-50%, -50%); 
            color: rgb(31, 39, 78);

        }

        .papelera img {
            max-width: 50%;
            height: auto;
        }

        .cerrar {
             position: fixed;
            display: flex;
            justify-content: center;
            align-items: center;
            top: 13%; 
            left: 91%; 
            transform: translate(-50%, -50%); 
            color: rgb(31, 39, 78);

        }

        .cerrar img {
            max-width: 60%;
            height: auto;
        }



        .tareaVencida {
            color: red;
      
        }


        .avisoTareasVencidas {
            position: fixed;
            width: 40%;
            background-color: rgb(179, 213, 255); 
            padding: 0.5%;
            box-shadow: 0px 4px 8px rgba(255, 0, 0, 0.1); 
            z-index: 90;
            top: 87%; 
            left: 30%; 
            font-size: 100%;
            max-height: 150px;
            overflow-y: auto; 
        }

        .avisoTareasVencidas ul {
            list-style-type: none;
            padding: 0;
        }

        .nombreUsuario1 {
            font-size: 1.3vw;
            text-align: right;
            color: rgb(255, 255, 255);
            font-family: 'Arial', sans-serif; 
            background-color: rgb(31, 39, 78);
            z-index: 10;
            margin: 0;
        }

        
        .botoneliminar {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 1% 20%; 

        }

        @media screen and (max-width: 600px) {

            
            .sidebaror {
                position: relative;
                transition: 0.3s;
                display: flex;
                flex-direction: row; 

            }

            .sidebar {
                height: 10%; 
                width: 90%; 
                position: fixed;
                top: 5.5%;
                left: -150%;
                background-color: #acc1e5;
                transition: 0.3s;
                display: flex; 
                flex-direction: row; 
                align-items: center; 
                font-size: 150%;
         
            }

            .sidebar a {
                padding: 1%; 
                text-decoration: none;
                font-size: 1vw;
                color: #1c4b6a;
                display: inline-block; 
            }

            .sidebar img {
                width: 50%;
                margin-left: 0;
            }

            .sidebar a:hover {
                background-color: #acc1e5;
            }

            .content a img {
                position: fixed;
                left: 1%;
                top: 5.5%;
                width: 10%;
                height: auto;
                z-index: 3;
            }

            header{
            background-color: rgb(31, 39, 78);
            color: white;
            text-align: center;
            padding: 2%;
    
            }

        footer {
            background-color: rgb(31, 39, 78);
            color: white;
            text-align: center;
            padding: 2%;
            margin-top: auto;
        }

        .papelera img {
                max-width: 40%; 
            }

        .listaTareas {
            background-color: rgb(163, 186, 217);
            width: 70%;
            max-height: 65vh; 
            overflow-y: auto; 
            height: 100%;
            padding: 1%;
            border: 1px solid #ccc;
            position: fixed;
            top: 63%; 
            left: 50%;
            transform: translate(-50%, -50%); 
            font-family: 'Arial', sans-serif; 
            font-size: 2.3vw;
            flex-direction: column;
            display: flex;
            
        }

        .listaTareas li {
            list-style-type: none;
            display: flex;
            flex-direction: row; 
            align-items: center;
            margin-bottom: 10%;
            background-color: white; 
            border: 1px solid #ccc;
            padding: 10%;
        }

        .listaTareas input[type="checkbox"] {
            margin-right: 10%;
        }


        .listaTareas input[type="text"] {
            flex: 3;
            padding: 1%;
    
        }

        .nuevaTarea {
         
            position: absolute;
            padding: 10px;
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: center;
            width: 150%;
            left: 50%;
            top: 27%;
            transform: translate(-50%, -50%);
            font-family: 'Arial', sans-serif; 
            font-size: 3vw;
  
        }    

        button {
            width: 10%; 
            height: auto;
        }


        .nuevaTarea input {
            margin: 0% 0.5% ; 
        }

        .nombreUsuario1 {
            font-size: 2.3vw;
            text-align: right;
            color: rgb(255, 255, 255);
            font-family: 'Arial', sans-serif; 
            background-color: rgb(31, 39, 78);
            z-index: 10;
            margin: 0;
        }

        .avisoTareasVencidas {
            position: fixed;
            width: 40%;
            height: 10%;
            background-color: rgb(179, 213, 255); 
            padding: 0.05%;
            box-shadow: 0px 4px 8px rgba(255, 0, 0, 0.1); 
            z-index: 90;
            top: 85.5%; 
            left: 30%; 
            font-size: 90%;
            overflow-y: auto; 
    
        }

        .avisoTareasVencidas ul {
            list-style-type: none;
            padding: 0;
        }


        .papelera {
             position: fixed;
            display: flex;
            justify-content: center;
            align-items: center;
            top: 20%; 
            left: 82%; 
            transform: translate(-50%, -50%); 
            color: rgb(31, 39, 78);

        }

        .papelera img {
            max-width: 60%;
            height: auto;
        }

        .cerrar {
             position: fixed;
            display: flex;
            justify-content: center;
            align-items: center;
            top: 21%; 
            left: 90%; 
            transform: translate(-50%, -50%); 
            color: rgb(31, 39, 78);

        }

        .cerrar img {
            max-width: 100%;
            height: auto;
        }

        .botoneliminar {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 5% 50%; 

        }


      }


        
        @media screen and (min-width: 601px) and (max-width: 1024px) {
            .sidebaror {
                position: relative;
                transition: 0.3s;
                display: flex;
                flex-direction: column;
                
            }

            .sidebaror img {
                    width: 95%;
                    height: auto;
                    margin-top: 2.5%;
                    }

            .sidebar {
                height: 150%;
                width: 13%;
                position: fixed;
                top: 0;
                left: -150%; 
                background-color: #acc1e5;
                transition: 0.3s;

            }

            .sidebar a {
                padding: 7%;
                text-decoration: none;
                font-size: 1vw;
                color: #1c4b6a;
                display: block;
            }

            .sidebar img {
            width: 110%;
            height: auto;

            }

            .sidebar a:hover {
                background-color: #acc1e5;
            }


            .content {
                margin-left: 5%;
                padding: 7%;
            }

            .content a img {
                position: fixed;
                left: 1%;
                top: 2%;
                width: 10%;
                height: auto;
                z-index: 3;
                }

                body {
                background-image: url('/images/Fondo3.png');  
                background-size: cover;               

                margin: 0;
                padding: 0;
                overflow: hidden; 
                display: flex;
                flex-direction: column;
                min-height: 100vh;
                }

                main {
                display: flex;
                flex-direction: column;
                }

                header{
                    background-color: rgb(31, 39, 78);
                    color: white;
                    text-align: center;
                    padding: 0.5%;
                
                }

                footer {
                    background-color: rgb(31, 39, 78);
                    color: white;
                    text-align: center;
                    padding: 0.5%;
                    margin-top: auto;
                }
                    
                    
                .header-container {
                    display: flex;
                    align-items: center;
                    justify-content: space-between; 
                }

                .papelera img {
                max-width: 40%; 
            }

            .listaTareas {
                background-color: rgb(163, 186, 217);
                width: 70%;
                max-height: 65vh; 
                overflow-y: auto; 
                height: 100%;
                padding: 1%;
                border: 1px solid #ccc;
                position: fixed;
                top: 57%; 
                left: 50%;
                transform: translate(-50%, -50%); 
                font-family: 'Arial', sans-serif; 
                font-size: 1.5vw;
                flex-direction: column;
                display: flex;
                
            }

            .listaTareas li {
                list-style-type: none;
                display: flex;
                flex-direction: row; 
                align-items: center;
                margin-bottom: 10%;
                background-color: white; 
                border: 1px solid #ccc;
                padding: 10%;
            }

            .listaTareas input[type="checkbox"] {
                margin-right: 10%;
            }


            .listaTareas input[type="text"] {
                flex: 3;
                padding: 1%;
        
            }

            .nuevaTarea {
            
                position: absolute;
                padding: 10px;
                display: flex;
                flex-direction: row;
                align-items: center;
                justify-content: center;
                width: 100%;
                left: 40%;
                top: 20%;
                transform: translate(-50%, -50%);
                font-family: 'Arial', sans-serif; 
                font-size: 2vw;
    
            }    

            button {
                width: 10%; 
                height: auto;
            }


            .nuevaTarea input {
                margin: 0% 0.5% ; 
            }

            .nombreUsuario1 {
                font-size: 1.9vw;
                text-align: right;
                color: rgb(255, 255, 255);
                font-family: 'Arial', sans-serif; 
                background-color: rgb(31, 39, 78);
                z-index: 10;
                margin: 0;
            }

            .avisoTareasVencidas {
                position: fixed;
                width: 50%;
                height: 10%;
                background-color: rgb(179, 213, 255); 
                padding: 0.05%;
                box-shadow: 0px 4px 8px rgba(255, 0, 0, 0.1); 
                z-index: 90;
                top: 85%; 
                left: 25%; 
                font-size: 90%;
                overflow-y: auto; 
        
            }

            .avisoTareasVencidas ul {
                list-style-type: none;
                padding: 0;
            }


            .papelera {
                position: fixed;
                display: flex;
                justify-content: center;
                align-items: center;
                top: 17%; 
                left: 82%; 
                transform: translate(-50%, -50%); 
                color: rgb(31, 39, 78);

            }

            .papelera img {
                max-width: 55%;
                height: auto;
            }

            .cerrar {
                position: fixed;
                display: flex;
                justify-content: center;
                align-items: center;
                top: 19%; 
                left: 90%; 
                transform: translate(-50%, -50%); 
                color: rgb(31, 39, 78);

            }

            .cerrar img {
                max-width: 100%;
                height: auto;
            }

            .botoneliminar {
                display: flex;
                justify-content: center;
                align-items: center;
                padding: 3% 30%; 

            }


        }



      
  </style>
  </head>
    
  <body>


    <header>
        <p class="nombreUsuario1">   Usuario conectado: <%= user.name %>  &nbsp;  &nbsp;</p>  
    </header>

    <main class="d-flex justify-content-between flex-row mb-3 flex-lg-row">

        <div class="p-2 ">    
            <div class="sidebaror " > 
                <div class="content" >
                    <a href="#" onclick="toggleSidebar()"><img src="/images/logo.png" alt="Botón de menú"></a>
                </div>
                <div class="sidebar" id="sidebar">
                    <p>&nbsp; &nbsp;</p>
                    <p>&nbsp; &nbsp;</p>
                    <p>&nbsp; &nbsp;</p>
                    <p>&nbsp; &nbsp;</p>
     
                    <a href="#" onclick="checklist()"><img src="/images/listaicono.png" alt="Icono Checklist"></a>
                    <a href="#" onclick="mascota()"><img src="/images/homeicono.png" alt="Icono Tienda"></a>
                    <a href="#" onclick="cementerio()"><img src="/images/Tumba.png" alt="Icono Cementerio"></a>
                </div>
            </div>           

      </div>

      <div class="p-2 ">   

        <form onsubmit="agregarTarea(); return false;" class="nuevaTarea">

            <input type="text" id="nuevaTareaInput" placeholder="Escribe una nueva tarea" required>
            <input type="text" id="fechaVencimiento" placeholder="Fecha de entrega">
                  
            <select id="Puntos">
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
            </select>
            <select id="Tipo de tarea">
                <option value="Examen">Examen</option>
                <option value="Proyecto">Proyecto</option>
                <option value="Ejercicio/s">Ejercicio/s</option>
            </select>
            <button type="submit">Agregar</button>
    
        </form>

        <ul class="listaTareas">
        </ul>


        <div class="papelera" id="papelera">
            <a></a> <a></a>  <a></a> <a></a> <a></a> <a></a> <a></a> <a></a>
            <a href="#" onclick="papelera()"><img src="/images/Trash3.png" alt="IconoPapelera"></a>
        </div>
        <div class="cerrar" id="cerrar">
            <a></a> <a></a>  <a></a> <a></a> <a></a> <a></a> <a></a> <a></a>
            <a href="#" onclick="cerrar()"><img src="/images/cerrar.png" alt="IconoCerrar"></a>
        </div>


        
      </div>



      <div class="p-2 "> 
       
      </div>

                
    </main>

    <footer>
      
    </footer>

 
<script>
      function toggleSidebar() {
          var sidebar = document.getElementById('sidebar');
          if (sidebar.style.left === '0px') {
              sidebar.style.left = '-650px';
          } else {
              sidebar.style.left = '0px';
          }
      }
  </script>


 <script>

       //Tareas//
       /*
       const nuevaTarea = {
        nombre: 'Nombre de la tarea',
        fechaVencimiento: new Date(), // Puedes ajustar la fecha según sea necesario
        puntos: 10,
        tipotarea: 'Tipo de tarea',
        };

        // Realizar una solicitud POST a la ruta /api/tareas
        fetch('/api/tareas', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(nuevaTarea),
        })
        .then(response => response.json())
        .then(data => {
            // Manejar la respuesta recibida después de guardar la tarea
            console.log('Tarea guardada:', data);
            // Aquí puedes realizar cualquier otra operación después de guardar la tarea
        })
        .catch(error => console.error('Error al guardar la tarea:', error));

        fetch('/api/tareas')
        .then(response => response.json())
        .then(data => {
            // Manejar la lista de tareas recibida en 'data'
            console.log('Lista de tareas:', data);
            // Aquí puedes realizar cualquier otra operación con la lista de tareas
        })
        .catch(error => console.error('Error al obtener la lista de tareas:', error));

        const taskId = Obtén el id de alguna manera ;
        // Realizar una solicitud DELETE a la ruta /api/tareas/:id
        fetch(`/api/tareas/${taskId}`, {
        method: 'DELETE',
        })
        .then(response => response.json())
        .then(data => {
            // Manejar la respuesta recibida después de eliminar la tarea
            console.log('Tarea eliminada:', data);
            // Puedes realizar cualquier otra operación después de eliminar la tarea
        })
        .catch(error => console.error('Error al eliminar la tarea:', error));

    fetch('/api/tareas', {
        method: 'DELETE',
    })
    .then(response => response.json())
    .then(data => {
        // Manejar la respuesta recibida después de eliminar todas las tareas
        console.log('Todas las tareas eliminadas:', data);
        // Puedes realizar cualquier otra operación después de eliminar todas las tareas
    })
    .catch(error => console.error('Error al eliminar todas las tareas:', error));

      */






         let taskIdCounter = 0; //Identificador tareas    
         //let puntosTotalesGuardados = localStorage.getItem("puntosTotales"); /// 
         let userId = '<%= user.id %>';

         /*
         fetch(`/${userId}/puntos`, {
        method: 'DELETE',
    })
    .then(response => response.json())
    .then(data => {
        // Manejar la respuesta recibida después de eliminar todas las tareas
        console.log('Todas las tareas eliminadas:', data);
        // Puedes realizar cualquier otra operación después de eliminar todas las tareas
    })
    .catch(error => console.error('Error al eliminar todas las tareas:', error)); */


        // Inicializar a cero si es null
        fetch(`/${userId}/puntos`)
            .then(response => {
                if (!response.ok) {
                throw new Error(`Error de red: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Datos de puntos:', data);
                if (data === null) {
                    data = 0;
                } else {
                    // Convertir a número si no es null
                    //data = parseInt(data, 10);

                   
                    if (data.length > 0) {
                        const idPuntos = data[0]._id;
                        console.log('ID de los puntos para el userId:', idPuntos);
                    } else {
                        if (data.length > 0) {
                        
                            fetch(`/${userId}/puntos`, {
                                method: 'POST', 
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                    body: JSON.stringify({
                                        userId: userId,
                                        puntosTotales: 0, 
                                    }),
                                })
                                .then(newResponse => {
                                    if (!newResponse.ok) {
                                         throw new Error(`Error al crear nuevos puntos: ${newResponse.status}`);
                                    }
                                        return newResponse.json();
                                })
                                .then(newData => {
                                        const newIdPuntos = newData._id;
                                        console.log('Se creó un nuevo conjunto de puntos. Nuevo ID:', newIdPuntos);

                                })
                                .catch(newError => {
                                        console.error('Error al crear nuevos puntos:', newError.message);

                                }); 
                            }
                    }  
                }
        
            })
            .catch(error => {
                console.error('Error al obtener datos de puntos:', error.message);
                // Manejar el error de alguna manera apropiada para tu aplicación
            });

 


            fetch(`/${userId}/tareas`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                },
                })
                .then(response => response.json())
                .then(data => {
                console.log("Idt: " + userId);
                console.log('Lista de tareas stored data:', data);
                //storedTareas.forEach(function (task) {
                    data.forEach(function (task) {
                        //if(task.userId !== userId){
                            const listaTareas = document.querySelector(".listaTareas");
                            var nuevaTareaLi = document.createElement("div");
                            nuevaTareaLi.classList.add("row");

                            const tareaVencida = new Date(task.fecha) < new Date();
                            if (tareaVencida) {
                                nuevaTareaLi.classList.add("tareaVencida");
                            }

                            if (task.fechaVencimiento) {
                                // Crear un objeto Date con la fecha de vencimiento
                                const fechaVencimiento = new Date(task.fechaVencimiento);

                                // Obtener los componentes de la fecha
                                const año = fechaVencimiento.getFullYear();
                                const mes = ('0' + (fechaVencimiento.getMonth() + 1)).slice(-2); // Sumar 1 porque los meses son 0-indexed
                                const día = ('0' + fechaVencimiento.getDate()).slice(-2);

                                // Crear una cadena con el formato deseado (YYYY-MM-DD)
                                const fechaFormateada = `${año}-${mes}-${día}`;

                                // Asignar la fecha formateada de vuelta a la tarea
                                task.fechaVencimiento = fechaFormateada;
                            }



                            nuevaTareaLi.dataset.taskId = task.id;
                            nuevaTareaLi.innerHTML = `
                                <div class="col-auto"><input type="checkbox"></div>
                                <div class="col"> <label for="tarea1">${task.nombre}</label></div>
                                <div class="col-2">${task.fechaVencimiento}</div>
                                <div class="col-1">${task.puntos}</div>
                                <div class="col-3">${task.tipotarea}</div>
                                <div class="col-3"><button class="botoneliminar">Eliminar</button></div>
                            `;
                            listaTareas.appendChild(nuevaTareaLi);

                            //var puntosTotalesGuardados = localStorage.getItem("puntosTotales"); //                            


                            const checkbox = nuevaTareaLi.querySelector('input[type="checkbox"]');
                            checkbox.addEventListener('change', function () {
                                if (checkbox.checked) {
                    
                                    console.log(`Checkbox en la tarea con ID ${task.id} marcado`);
                                    const respuesta = confirm("¿Ha completado la tarea " + task.nombre + "?");
                                    if (respuesta) {
                                        console.log("La acción se llevará a cabo. Los puntos totales son: " + task.puntos);
                                        //console.log("puntos antes: " + puntosTotalesGuardados);
    
                                        fetch(`/${userId}/puntos`)
                                        .then(response => {
                                            if (!response.ok) {
                                            throw new Error(`Error de red: ${response.status}`);
                                            }
                                            return response.json();
                                        })
                                        .then(datap => {

                                            let idPuntos = datap[0]._id;
                                            let userId = '<%= user.id %>';

                                            if (!idPuntos) {
                                                throw new Error('No se encontró un ID en los datos de puntos');
                                            }

                                            const puntossuma = datap[0].puntosTotales + task.puntos;
                                            console.log("Suma de los puntos:" + puntossuma);

                                            const dataToUpdate = {
                                              userId: userId,
                                              puntosTotales: puntossuma ,
                                            };
                                            
                                            fetch(`/${userId}/puntos/${idPuntos}`, {
                                            method: 'PUT',
                                            headers: {
                                                'Content-Type': 'application/json',
                                            },
                                            body: JSON.stringify(dataToUpdate),
                                            })
                                            .then(response => {
                                                if (!response.ok) {
                                                throw new Error(`Error del servidor: ${response.status} - ${response.statusText}`);
                                                }
                                                return response.json();
                                            })
                                            .then(updatedData => {
                                                console.log('Response JSON:', updatedData);
                                                // Handle the updated data as needed
                                            })
                                            .catch(error => {
                                                console.error('Error al realizar la solicitud:', error);
                                            });

                                            eliminarTareaCheck(task);
                                            location.reload();
                                    
                                        })
                                        .catch(error => {
                                            console.error('Error al obtener datos de puntos:', error.message);
                                            // Manejar el error de alguna manera apropiada para tu aplicación
                                        });                               
   
                                        /*
                                        if (!isNaN(puntosTotalesGuardados)) {
                                            puntosTotalesGuardados += parseInt(task.puntos, 10);
                                            localStorage.setItem("puntosTotales", puntosTotalesGuardados); //
                                            eliminarTarea(task);
                                            location.reload();
                                        } else {
                                            console.error("Error: puntosTotalesGuardados es NaN");
                                        } */
                                    } else { 
                                        checkbox.checked = false;
                                    }


                                                    
                                } 
                            });
                            const botonesEliminar = nuevaTareaLi.getElementsByClassName("botoneliminar");

                            for (const boton of botonesEliminar) {
                                boton.addEventListener('click', function (event) {
                                    console.log('Botón eliminar presionado');

                                    // Obtener la fila (row) de la tarea
                                    const tareaRow = event.target.parentElement.parentElement;

                                    // Llamar a la función para eliminar la tarea
                                    eliminarTarea(task);
                                    location.reload(); 
                                });
                                
                            }   
                        //}


                });
                ordenarTareasPorFecha();
               mostrarAvisoTareasVencidas();     
            })
        .catch(error => console.error('Error al obtener la lista de tareas:', error));



    

        const fechaVencimientoInput = document.getElementById('fechaVencimiento');
            $(fechaVencimientoInput).datepicker({
                format: 'yyyy-mm-dd',
                autoclose: true
        });

        function asignarEventosEliminar() {
            const botonesEliminar = document.getElementsByClassName("botoneliminar");
        for (const boton of botonesEliminar) {
            boton.addEventListener('click', function (event) {
                console.log('Botón eliminar presionado');

                // Obtener la fila (row) de la tarea
                const tareaRow = event.target.parentElement.parentElement;

                // Obtener la información de la tarea desde los elementos de la fila
                const taskId = tareaRow.dataset.taskId;
                const tareaNombre = tareaRow.querySelector('.col label').innerText;
                const tareaFecha = tareaRow.querySelector('.col-2').innerText;
                const tareaPuntos = tareaRow.querySelector('.col-1').innerText;
                const tareaTipo = tareaRow.querySelector('.col-3').innerText;

                // Crear un objeto con la información de la tarea
                const tareaSeleccionada = {
                    id: taskId,
                    nombre: tareaNombre,
                    fecha: tareaFecha,
                    puntos: tareaPuntos,
                    tipo: tareaTipo
                };

                console.log('Información de la tarea seleccionada:', tareaSeleccionada);

                // Llamar a la función para eliminar la tarea
                //eliminarTarea(tareaSeleccionada);
            });
        }
        }




   function agregarTarea() {
    var nuevaTareaInput = document.getElementById("nuevaTareaInput");
    var nuevaTarea = nuevaTareaInput.value;
    var fechaVencimiento = fechaVencimientoInput.value;
    var puntos = document.getElementById("Puntos").value;
    var tipotarea = document.getElementById("Tipo de tarea").value;
    console.log("Nueva tarea: " + nuevaTarea + " " + fechaVencimiento + " " + puntos );

    if (nuevaTarea.trim() !== "") {

        
                if (tareaConMismoNombre(nuevaTarea)) {
                    alert("¡Ya existe una tarea con el mismo nombre!");
                        return;
                }
            
           
                taskIdCounter++;
                var listaTareas = document.querySelector(".listaTareas");
                var nuevaTareaLi = document.createElement("div");
                nuevaTareaLi.classList.add("row");


                nuevaTareaLi.dataset.taskId = taskIdCounter;
                nuevaTareaLi.innerHTML = `
                    <div class="col-auto"><input type="checkbox"></div>
                    <div class="col"> <label for="tarea1">${nuevaTarea}</label></div>
                    <div class="col-2">${fechaVencimiento}</div>
                    <div class="col-1">${puntos}</div>
                    <div class="col-3">${tipotarea}</div>
                    <div class="col-3"><button class="botoneliminar">Eliminar</button></div>
                `;
                listaTareas.appendChild(nuevaTareaLi);
                nuevaTareaInput.value = "";
                fechaVencimientoInput.value = "";
        
                
                function tareaConMismoNombre(nombreTarea) {
                    const tareasExistente = document.querySelectorAll('.listaTareas .col label');
                    for (const tareaExistente of tareasExistente) {
                        if (tareaExistente.innerText.trim() === nombreTarea.trim()) {
                            return true;
                        }
                    }
                    return false;
                }  

 
         
                const botonEliminar = nuevaTareaLi.querySelector(".botoneliminar");
                botonEliminar.addEventListener('click', function (event) {
                    console.log('Botón eliminar presionado');

                    // Obtener la fila (row) de la tarea
                    const tareaRow = event.target.parentElement.parentElement;

                    // Obtener la información de la tarea desde los elementos de la fila
                    const taskId = tareaRow.dataset.taskId;
                    const tareaNombre = tareaRow.querySelector('.col label').innerText;
                    const tareaFecha = tareaRow.querySelector('.col-2').innerText;
                    const tareaPuntos = tareaRow.querySelector('.col-1').innerText;
                    const tareaTipo = tareaRow.querySelector('.col-3').innerText;

                    // Crear un objeto con la información de la tarea
                    const tareaSeleccionada = {
                        userId: userId,
                        nombre: tareaNombre,
                        fecha: tareaFecha,
                        puntos: tareaPuntos,
                        tipo: tareaTipo
                    };
               
                    //console.log('Información de la tarea seleccionada:', tareaSeleccionada);
                    //eliminarTarea(tareaSeleccionada);
                });
          
                /*
                tareas.push({
                    id: taskIdCounter,
                    tarea: nuevaTarea,
                    fecha: fechaVencimiento,
                    puntos: puntos,
                    tipoTarea: tipotarea
                }); */

          
                console.log("Nueva tarea:" + nuevaTarea + " " + fechaVencimiento + " " + puntos );

                
                const nuevaTarea1 = {
                    userId: userId,
                    nombre: nuevaTarea,
                    fechaVencimiento: fechaVencimiento, 
                    puntos: puntos,
                    tipotarea: tipotarea,
                };



                fetch('/' + userId + '/tareas', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(nuevaTarea1),
                })
                    .then(response => response.json())
                    .then(data => {
                        console.log('Tarea guardada:', data);
                    })
                    .catch(error => console.error('Error al guardar la tarea:', error));


                //localStorage.setItem('tareas', JSON.stringify(tareas)); //

                ordenarTareasPorFecha();
                asignarEventosEliminar();
            //} 
                   
        }
        location.reload();  
    }



            /*
        const botonesEliminar = document.getElementsByClassName("botoneliminar");

        for (const boton of botonesEliminar) {
            boton.addEventListener('mousedown', function (event) {
                console.log('Botón eliminar presionado');
                eliminarTarea(event.target.parentElement.parentElement);
            });
        } */



        //const tareasEliminadas = JSON.parse(localStorage.getItem('tareasEliminadas')) || []; 
        function eliminarTarea(tarea) {

            //const taskId = tareaRow.dataset.taskId;
            //const tareas = JSON.parse(localStorage.getItem('tareas')) || []; //
            const tareaInfo = {
                userId: userId,
                nombre: tarea.nombre,  
                fechaVencimiento: tarea.fechaVencimiento,
                puntos:tarea.puntos,
                tipotarea: tarea.tipotarea
            };


                fetch('/' + userId + '/papeleras', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(tareaInfo),
                })
                    .then(response => response.json())
                    .then(data => {
                      
                        console.log('Tarea guardada:', data);
                      
                    })
                    .catch(error => console.error('Error al guardar la tarea:', error));

               
                    fetch( '/' + userId +`/tareas/${tarea._id}`, {
                        method: 'DELETE'
                    })
                    .then(response => response.json())
                    .then(data => {
                        console.log('Tarea eliminada:', data);
                    })
                    .catch(error => console.error('Error al eliminar la tarea:', error));

                    fetch('/' + userId + '/papeleras')
                        .then(response => response.json())
                        .then(data => {
                            // Manejar la lista de tareas recibida en 'data'
                            console.log('Lista de papeleras:', data);
                            // Aquí puedes realizar cualquier otra operación con la lista de tareas
                        })
                        .catch(error => console.error('Error al obtener la lista de tareas:', error));

  
        }

        function eliminarTareaCheck(tarea) {
            //const taskId = tareaRow.dataset.taskId;
            //const tareas = JSON.parse(localStorage.getItem('tareas')) || []; //
            const tareaInfo = {
                userId: userId,
                nombre: tarea.nombre,  
                fechaVencimiento: tarea.fechaVencimiento,
                puntos: 0,
                tipotarea: tarea.tipotarea
            };


                fetch('/' + userId + '/papeleras', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(tareaInfo),
                })
                    .then(response => response.json())
                    .then(data => {
                    
                        console.log('Tarea guardada:', data);
                    
                    })
                    .catch(error => console.error('Error al guardar la tarea:', error));

            
                    fetch( '/' + userId +`/tareas/${tarea._id}`, {
                        method: 'DELETE'
                    })
                    .then(response => response.json())
                    .then(data => {
                        console.log('Tarea eliminada:', data);
                    })
                    .catch(error => console.error('Error al eliminar la tarea:', error));

                    fetch('/' + userId + '/papeleras')
                        .then(response => response.json())
                        .then(data => {
                            // Manejar la lista de tareas recibida en 'data'
                            console.log('Lista de papeleras:', data);
                            // Aquí puedes realizar cualquier otra operación con la lista de tareas
                        })
                        .catch(error => console.error('Error al obtener la lista de tareas:', error));


            }

        function compararFechas(a, b) {
            const fechaA = new Date(a.querySelector(".col-2").textContent); 
            const fechaB = new Date(b.querySelector(".col-2").textContent);

            if (!isNaN(fechaA) && !isNaN(fechaB)) {
                return fechaA - fechaB;
            } else {
            
                return isNaN(fechaA) ? 1 : -1;
            }
        }

        function ordenarTareasPorFecha() {
            const listaTareas = document.querySelector(".listaTareas");
            const tareas = Array.from(listaTareas.querySelectorAll(".row"));

            tareas.sort(compararFechas);

            while (listaTareas.firstChild) {
                listaTareas.removeChild(listaTareas.firstChild);
            }

            tareas.forEach(tarea => {
                listaTareas.appendChild(tarea);
            });

        }


        function mostrarAvisoTareasVencidas() {

            //const tareasVencidas = storedTareas.filter(task => new Date(task.fecha) < new Date());
            fetch('/' + userId + '/tareas')
            .then(response => response.json())
            .then(data => {

                const tareasVencidas = data.filter(task => new Date(task.fechaVencimiento) < new Date());

                if (tareasVencidas.length > 0) {


                    const avisoDiv = document.createElement('div');
                    avisoDiv.classList.add('avisoTareasVencidas');

                    const mensajeDiv = document.createElement('div');
                    mensajeDiv.textContent = '¡Tienes tareas vencidas! Por favor, revisa las siguientes tareas:';
                    const listaTareasUl = document.createElement('ul');

                    tareasVencidas.forEach(task => {
                        const tareaLi = document.createElement('li');
                        tareaLi.textContent = task.nombre;
               
                        listaTareasUl.appendChild(tareaLi);
                    });



                    avisoDiv.appendChild(mensajeDiv);
                    avisoDiv.appendChild(listaTareasUl);
                    document.body.appendChild(avisoDiv);
                }
                })
        .catch(error => console.error('Error al obtener la lista de tareas:', error));
        }


        
</script>




<script>
    function index(){
        var userId = '<%= user.id %>';
        window.location.href = "/"  + userId;

    }

    function cerrar(){
        var userId = '<%= user.id %>';
        window.location.href = "/"  + userId;

    }

    function papelera(){
        var userId = '<%= user.id %>';
        window.location.href = "/papelera/" + userId;

    }

    function mascota(){
        var userId = '<%= user.id %>';
      window.location.href = "/mascota/" + userId;

    }

    function cementerio(){
        var userId = '<%= user.id %>';
      window.location.href = "/cementerio/" + userId;

    }
</script>
    <script src="/bootstrap-datepicker-master/dist/js/bootstrap-datepicker.js"></script>

    <!--  <h1>Hello, world!</h1> -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
  </body>
</html>