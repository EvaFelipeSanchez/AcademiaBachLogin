<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>AcademiaBach</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <link rel="stylesheet" href="/bootstrap-datepicker-master/dist/css/bootstrap-datepicker.css">
    <script src="/bootstrap-datepicker-master/dist/js/bootstrap-datepicker.js"></script>

        <style>


        .listaTareas {
            background-color: rgb(163, 186, 217);
            overflow-y: auto; 
            padding: 1%;
            font-family: sans-serif; 

            flex-direction: column;
            display: flex;
            color: black;
            
        }

        .row {
            display: flex;
            align-items: center;
            background-color: #fff;
            margin: 0.7% 0%;
        }

        .col {
            padding: 0.5%;
            border: 1px solid #ccc;
            margin-right: 0.7%;
        }

   
        .tareaVencida {
            color: red;
      
        }


        .avisoTareasVencidas {
            background-color: rgb(31, 39, 78); color:white; position: fixed; 
            bottom: 0;
            left: 0;
            right: 0;
            height: 60px;
            overflow-y: auto; 
            text-align: center;
        }

        .avisoTareasVencidas ul {
            list-style-type: none;
            padding: 0;
            text-align: center;
        }




      
  </style>
  </head>
    


<body >
	<div class="d-flex flex-row min-vh-100">
		<div class="offcanvas offcanvas-start w-auto" id="navbarSupportedContent" style="background-color: #acc1e5;">
			<div class="offcanvas-header">
				<button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
			</div>

			<div class="offcanvas-body">
				<ul class="nav flex-column">
					<li class="nav-item">
						<a class="nav-link" aria-current="page" href="#" style="text-align:center"  onclick="index()">
							<img src="/images/indexlogo.png" style="width: 100px;" >
              
						</a>
					</li>
					<li class="nav-item">
						<a class="nav-link" aria-current="page" href="#" style="text-align:center"  onclick="papelera()">
							<img src="/images/papeleralogo.png" style="width: 100px;">
          
						</a>
					</li>
					<li class="nav-item">
						<a class="nav-link" aria-current="page" href="#" style="text-align:center"  onclick="mascota()">
							<img src="/images/homeicono.png" style="width: 100px;">
           
						</a>
					</li>
					<li class="nav-item">
						<a class="nav-link" aria-current="page" href="#" style="text-align:center"  onclick="tienda()">
							<img src="/images/tiendalogo.png" style="width: 100px;">
                  
						</a>
					</li>
					<li class="nav-item">
						<a class="nav-link" aria-current="page" href="#" style="text-align:center"  onclick="cementerio()">
							<img src="/images/Tumba.png" style="width: 100px;">
                 
						</a>
					</li>
				</ul>
			</div>
		</div>

		<div class="offcanvas offcanvas-top" id="navbarSupportedContentTop" style="background-color: #acc1e5;">
			<div class="offcanvas-header">
				<button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
			</div>
			<div class="offcanvas-body">
				<ul class="nav flex-row">
                    <li class="nav-item"  style="margin-right: -2%; ">
						<a class="nav-link" aria-current="page" href="#"  style="text-align:center" onclick="index()">
							<img src="/images/indexlogo.png" style="width: 55px;" >

						</a>
					</li>
					<li class="nav-item" style="margin-right: -2%; ">
						<a class="nav-link" aria-current="page" href="#"  style="text-align:center" onclick="papelera()">
							<img src="/images/papeleralogo.png" style="width: 55px;">
          
						</a>
					</li>
            
                <li class="nav-item" style="margin-right: -2%;">
                    <a class="nav-link" aria-current="page" href="#"  style="text-align:center" onclick="mascota()">
                        <img src="/images/homeicono.png" style="width: 55px;">
        
                    </a>
                </li>
                <li class="nav-item" style="margin-right: -2%;">
                    <a class="nav-link" aria-current="page" href="#"  style="text-align:center" onclick="tienda()">
                        <img src="/images/tiendalogo.png" style="width: 55px;">
                  
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" aria-current="page" href="#"   style="text-align:center" onclick="cementerio()">
                        <img src="/images/Tumba.png" style="width: 60px;">
                  
                    </a>
                </li>
				</ul>
			</div>
		</div>



        <div class="flex-grow-1 d-flex flex-column  text-align:center">
            <div class="p-2  flex-grow-1 d-flex flex-column  justify-content-start align-items-stretch" style="background-color:rgb(82,107,141); color:white">

				<div class="d-flex flex-row justify-content-between" style="width:100%;">
					<a type="button" data-bs-toggle="offcanvas" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation" class="d-none d-lg-block">
						<img src="/images/logo.png" style="width: 100px;">
					</a>

					<a type="button" data-bs-toggle="offcanvas" data-bs-target="#navbarSupportedContentTop" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation" class="d-lg-none">
						<img src="/images/logo.png" style="width: 80px;">
					</a>

				</div>

               
				<form class="d-flex flex-md-row p-3 flex-column" onsubmit="agregarTarea(); return false;">
                        
                    <input type="text" id="nuevaTareaInput" class="form-control m-1" placeholder="Escribe una nueva tarea" required>
                    <input id="fechaVencimiento" class="form-control m-1" placeholder="Fecha de entrega">
                    <select id="Puntos" class="form-select m-1">
                        <option selected="1">1</option>
                        <option value="2">2</option>
                        <option value="3">3</option>
                        <option value="4">4</option>
                        <option value="5">5</option>
                    </select>
                    <select id="Tipo de tarea" class="form-select m-1" placeholder="Tipo de tarea">
                        <option selected>Ejercicio</option>
                        <option value="Examen">Examen</option>
                        <option value="Proyecto">Proyecto</option>
                    </select>
                    <input type="submit" value="Agregar" class="btn btn-primary btn-block m-1"  style="background-color: #213953; color: #fff; border: none">
					
                </form>

                    <div style="background-color:  rgb(163, 186, 217);" class="flex-grow-1 p-3">
                        <ul class="listaTareas" >
                        </ul> 
                    </div> 			
               
                
			</div>
		</div>
    </div>



 <script>

         let taskIdCounter = 0;           
         let userId = '<%= user.id %>';

      
        fetch(`/${userId}/puntos`)
            .then(response => {
                if (!response.ok) {
                throw new Error(`Error de red: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Datos de puntos:', data);
                if (data === null) {
                    data = 0;
                } else {


                   
                    if (data.length > 0) {
                        const idPuntos = data[0]._id;
                        console.log('ID de los puntos para el userId:', idPuntos);
                    } else {
                        if (data.length > 0) {
                        
                            fetch(`/${userId}/puntos`, {
                                method: 'POST', 
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                    body: JSON.stringify({
                                        userId: userId,
                                        puntosTotales: 0, 
                                    }),
                                })
                                .then(newResponse => {
                                    if (!newResponse.ok) {
                                         throw new Error(`Error al crear nuevos puntos: ${newResponse.status}`);
                                    }
                                        return newResponse.json();
                                })
                                .then(newData => {
                                        const newIdPuntos = newData._id;
                                        console.log('Se creÃ³ un nuevo conjunto de puntos. Nuevo ID:', newIdPuntos);

                                })
                                .catch(newError => {
                                        console.error('Error al crear nuevos puntos:', newError.message);

                                }); 
                            }
                    }  
                }
        
            })
            .catch(error => {
                console.error('Error al obtener datos de puntos:', error.message);
                
            });

 


            fetch(`/${userId}/tareas`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                },
                })
                .then(response => response.json())
                .then(data => {
                console.log("Idt: " + userId);
                console.log('Lista de tareas stored data:', data);
                
                    data.forEach(function (task) {
                       
                            const listaTareas = document.querySelector(".listaTareas");
                            var nuevaTareaLi = document.createElement("div");
                            nuevaTareaLi.classList.add("row");

                            const tareaVencida = new Date(task.fecha) < new Date();
                            if (tareaVencida) {
                                nuevaTareaLi.classList.add("tareaVencida");
                            }

                            if (task.fechaVencimiento) {
                                
                                const fechaVencimiento = new Date(task.fechaVencimiento);

                                
                                const aÃ±o = fechaVencimiento.getFullYear();
                                const mes = ('0' + (fechaVencimiento.getMonth() + 1)).slice(-2); 
                                const dÃ­a = ('0' + fechaVencimiento.getDate()).slice(-2);
                                
                                const fechaFormateada = `${aÃ±o}-${mes}-${dÃ­a}`;

                                
                                task.fechaVencimiento = fechaFormateada;
                            }



                            nuevaTareaLi.dataset.taskId = task.id;
                            nuevaTareaLi.innerHTML = `
                                <div class="col-auto"><input type="checkbox"></div>
                                <div class="col"> <label for="tarea1">${task.nombre}</label></div>
                                <div class="col-2">${task.fechaVencimiento}</div>
                                <div class="col-1">${task.puntos}</div>
                                <div class="col-3">${task.tipotarea}</div>
                                <div class="col-3"><button class="botoneliminar">Eliminar</button></div>
                            `;
                            listaTareas.appendChild(nuevaTareaLi);                        


                            const checkbox = nuevaTareaLi.querySelector('input[type="checkbox"]');
                            checkbox.addEventListener('change', function () {
                                if (checkbox.checked) {
                    
                                    console.log(`Checkbox en la tarea con ID ${task.id} marcado`);
                                    const respuesta = confirm("Â¿Ha completado la tarea " + task.nombre + "?");
                                    if (respuesta) {
                                        console.log("La acciÃ³n se llevarÃ¡ a cabo. Los puntos totales son: " + task.puntos);
                                        
    
                                        fetch(`/${userId}/puntos`)
                                        .then(response => {
                                            if (!response.ok) {
                                            throw new Error(`Error de red: ${response.status}`);
                                            }
                                            return response.json();
                                        })
                                        .then(datap => {

                                            let idPuntos = datap[0]._id;
                                            let userId = '<%= user.id %>';

                                            if (!idPuntos) {
                                                throw new Error('No se encontrÃ³ un ID en los datos de puntos');
                                            }

                                            const puntossuma = datap[0].puntosTotales + task.puntos;
                                            console.log("Suma de los puntos:" + puntossuma);

                                            const dataToUpdate = {
                                              userId: userId,
                                              puntosTotales: puntossuma ,
                                            };
                                            
                                            fetch(`/${userId}/puntos/${idPuntos}`, {
                                            method: 'PUT',
                                            headers: {
                                                'Content-Type': 'application/json',
                                            },
                                            body: JSON.stringify(dataToUpdate),
                                            })
                                            .then(response => {
                                                if (!response.ok) {
                                                throw new Error(`Error del servidor: ${response.status} - ${response.statusText}`);
                                                }
                                                return response.json();
                                            })
                                            .then(updatedData => {
                                                console.log('Response JSON:', updatedData);
                                                
                                            })
                                            .catch(error => {
                                                console.error('Error al realizar la solicitud:', error);
                                            });

                                            eliminarTareaCheck(task);
                                            location.reload();
                                    
                                        })
                                        .catch(error => {
                                            console.error('Error al obtener datos de puntos:', error.message);
                                            
                                        });                               
   

                                    } else { 
                                        checkbox.checked = false;
                                    }


                                                    
                                } 
                            });
                            const botonesEliminar = nuevaTareaLi.getElementsByClassName("botoneliminar");

                            for (const boton of botonesEliminar) {
                                boton.addEventListener('click', function (event) {
                                    console.log('BotÃ³n eliminar presionado');

                                    
                                    const tareaRow = event.target.parentElement.parentElement;
                                    
                                    eliminarTarea(task);
                                    location.reload(); 
                                });
                                
                            }   
                        //}


                });
                ordenarTareasPorFecha();
               mostrarAvisoTareasVencidas();     
            })
        .catch(error => console.error('Error al obtener la lista de tareas:', error));



    

        const fechaVencimientoInput = document.getElementById('fechaVencimiento');
            $(fechaVencimientoInput).datepicker({
                format: 'yyyy-mm-dd',
                autoclose: true
        });

        function asignarEventosEliminar() {
            const botonesEliminar = document.getElementsByClassName("botoneliminar");
        for (const boton of botonesEliminar) {
            boton.addEventListener('click', function (event) {
                console.log('BotÃ³n eliminar presionado');

                
                const tareaRow = event.target.parentElement.parentElement;

                
                const taskId = tareaRow.dataset.taskId;
                const tareaNombre = tareaRow.querySelector('.col label').innerText;
                const tareaFecha = tareaRow.querySelector('.col-2').innerText;
                const tareaPuntos = tareaRow.querySelector('.col-1').innerText;
                const tareaTipo = tareaRow.querySelector('.col-3').innerText;

                
                const tareaSeleccionada = {
                    id: taskId,
                    nombre: tareaNombre,
                    fecha: tareaFecha,
                    puntos: tareaPuntos,
                    tipo: tareaTipo
                };

                console.log('InformaciÃ³n de la tarea seleccionada:', tareaSeleccionada);


            });
        }
        }




   function agregarTarea() {
    var nuevaTareaInput = document.getElementById("nuevaTareaInput");
    var nuevaTarea = nuevaTareaInput.value;
    var fechaVencimiento = fechaVencimientoInput.value;
    var puntos = document.getElementById("Puntos").value;
    var tipotarea = document.getElementById("Tipo de tarea").value;
    console.log("Nueva tarea: " + nuevaTarea + " " + fechaVencimiento + " " + puntos );

    if (nuevaTarea.trim() !== "") {

        
                if (tareaConMismoNombre(nuevaTarea)) {
                    alert("Â¡Ya existe una tarea con el mismo nombre!");
                        return;
                }
            
           
                taskIdCounter++;
                var listaTareas = document.querySelector(".listaTareas");
                var nuevaTareaLi = document.createElement("div");
                nuevaTareaLi.classList.add("row");


                nuevaTareaLi.dataset.taskId = taskIdCounter;
                nuevaTareaLi.innerHTML = `
                    <div class="col-auto"><input type="checkbox"></div>
                    <div class="col"> <label for="tarea1">${nuevaTarea}</label></div>
                    <div class="col-2">${fechaVencimiento}</div>
                    <div class="col-1">${puntos}</div>
                    <div class="col-3">${tipotarea}</div>
                    <div class="col-3"><button class="botoneliminar">Eliminar</button></div>
                `;
                listaTareas.appendChild(nuevaTareaLi);
                nuevaTareaInput.value = "";
                fechaVencimientoInput.value = "";
        
                
                function tareaConMismoNombre(nombreTarea) {
                    const tareasExistente = document.querySelectorAll('.listaTareas .col label');
                    for (const tareaExistente of tareasExistente) {
                        if (tareaExistente.innerText.trim() === nombreTarea.trim()) {
                            return true;
                        }
                    }
                    return false;
                }  

 
         
                const botonEliminar = nuevaTareaLi.querySelector(".botoneliminar");
                botonEliminar.addEventListener('click', function (event) {
                    console.log('BotÃ³n eliminar presionado');

                    
                    const tareaRow = event.target.parentElement.parentElement;

                    
                    const taskId = tareaRow.dataset.taskId;
                    const tareaNombre = tareaRow.querySelector('.col label').innerText;
                    const tareaFecha = tareaRow.querySelector('.col-2').innerText;
                    const tareaPuntos = tareaRow.querySelector('.col-1').innerText;
                    const tareaTipo = tareaRow.querySelector('.col-3').innerText;

                   
                    const tareaSeleccionada = {
                        userId: userId,
                        nombre: tareaNombre,
                        fecha: tareaFecha,
                        puntos: tareaPuntos,
                        tipo: tareaTipo
                    };
               

                });
          


          
                console.log("Nueva tarea:" + nuevaTarea + " " + fechaVencimiento + " " + puntos );

                
                const nuevaTarea1 = {
                    userId: userId,
                    nombre: nuevaTarea,
                    fechaVencimiento: fechaVencimiento, 
                    puntos: puntos,
                    tipotarea: tipotarea,
                };



                fetch('/' + userId + '/tareas', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(nuevaTarea1),
                })
                    .then(response => response.json())
                    .then(data => {
                        console.log('Tarea guardada:', data);
                    })
                    .catch(error => console.error('Error al guardar la tarea:', error));


                

                ordenarTareasPorFecha();
                asignarEventosEliminar();
            
                   
        }
        location.reload();  
    }



        function eliminarTarea(tarea) {


            const tareaInfo = {
                userId: userId,
                nombre: tarea.nombre,  
                fechaVencimiento: tarea.fechaVencimiento,
                puntos:tarea.puntos,
                tipotarea: tarea.tipotarea
            };


                fetch('/' + userId + '/papeleras', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(tareaInfo),
                })
                    .then(response => response.json())
                    .then(data => {
                      
                        console.log('Tarea guardada:', data);
                      
                    })
                    .catch(error => console.error('Error al guardar la tarea:', error));

               
                    fetch( '/' + userId +`/tareas/${tarea._id}`, {
                        method: 'DELETE'
                    })
                    .then(response => response.json())
                    .then(data => {
                        console.log('Tarea eliminada:', data);
                    })
                    .catch(error => console.error('Error al eliminar la tarea:', error));

                    fetch('/' + userId + '/papeleras')
                        .then(response => response.json())
                        .then(data => {
                            
                            console.log('Lista de papeleras:', data);
                            
                        })
                        .catch(error => console.error('Error al obtener la lista de tareas:', error));

  
        }

        function eliminarTareaCheck(tarea) {

            const tareaInfo = {
                userId: userId,
                nombre: tarea.nombre,  
                fechaVencimiento: tarea.fechaVencimiento,
                puntos: 0,
                tipotarea: tarea.tipotarea
            };


                fetch('/' + userId + '/papeleras', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(tareaInfo),
                })
                    .then(response => response.json())
                    .then(data => {
                    
                        console.log('Tarea guardada:', data);
                    
                    })
                    .catch(error => console.error('Error al guardar la tarea:', error));

            
                    fetch( '/' + userId +`/tareas/${tarea._id}`, {
                        method: 'DELETE'
                    })
                    .then(response => response.json())
                    .then(data => {
                        console.log('Tarea eliminada:', data);
                    })
                    .catch(error => console.error('Error al eliminar la tarea:', error));

                    fetch('/' + userId + '/papeleras')
                        .then(response => response.json())
                        .then(data => {
                            
                            console.log('Lista de papeleras:', data);
                            
                        })
                        .catch(error => console.error('Error al obtener la lista de tareas:', error));


            }

        function compararFechas(a, b) {
            const fechaA = new Date(a.querySelector(".col-2").textContent); 
            const fechaB = new Date(b.querySelector(".col-2").textContent);

            if (!isNaN(fechaA) && !isNaN(fechaB)) {
                return fechaA - fechaB;
            } else {
            
                return isNaN(fechaA) ? 1 : -1;
            }
        }

        function ordenarTareasPorFecha() {
            const listaTareas = document.querySelector(".listaTareas");
            const tareas = Array.from(listaTareas.querySelectorAll(".row"));

            tareas.sort(compararFechas);

            while (listaTareas.firstChild) {
                listaTareas.removeChild(listaTareas.firstChild);
            }

            tareas.forEach(tarea => {
                listaTareas.appendChild(tarea);
            });

        }


        function mostrarAvisoTareasVencidas() {

            
            fetch('/' + userId + '/tareas')
            .then(response => response.json())
            .then(data => {

                const tareasVencidas = data.filter(task => new Date(task.fechaVencimiento) < new Date());

                if (tareasVencidas.length > 0) {


                    const avisoDiv = document.createElement('div');
                    avisoDiv.classList.add('avisoTareasVencidas');

                    const mensajeDiv = document.createElement('div');
                    mensajeDiv.textContent = 'Â¡Tienes tareas vencidas! Por favor, revisa las siguientes tareas:';
                    const listaTareasUl = document.createElement('ul');

                    tareasVencidas.forEach(task => {
                        const tareaLi = document.createElement('li');
                        tareaLi.textContent = task.nombre;
               
                        listaTareasUl.appendChild(tareaLi);
                    });



                    avisoDiv.appendChild(mensajeDiv);
                    avisoDiv.appendChild(listaTareasUl);
                    document.body.appendChild(avisoDiv);
                }
                })
        .catch(error => console.error('Error al obtener la lista de tareas:', error));
        }


        
</script>




<script>
    function index(){
        var userId = '<%= user.id %>';
        window.location.href = "/"  + userId;

    }

    function cerrar(){
        var userId = '<%= user.id %>';
        window.location.href = "/"  + userId;

    }

    function papelera(){
        var userId = '<%= user.id %>';
        window.location.href = "/papelera/" + userId;

    }

    function mascota(){
        var userId = '<%= user.id %>';
      window.location.href = "/mascota/" + userId;

    }


    function tienda(){
        var userId = '<%= user.id %>';
        window.location.href = "/tienda/" + userId;
        }	

    function cementerio(){
        var userId = '<%= user.id %>';
      window.location.href = "/cementerio/" + userId;

    }
</script>
    <script src="/bootstrap-datepicker-master/dist/js/bootstrap-datepicker.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
  </body>
</html>