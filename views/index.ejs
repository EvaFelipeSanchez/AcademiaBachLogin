<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>AcademiaBach</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <style>
      /* Estilos para el menú sidebar */
      .sidebar {
          height: 150%;
          width: 9%;
          position: fixed;
          top: 0;
          left: -150%; 
          background-color: #acc1e5;
          transition: 0.3s;
      }

      .sidebar a {
          padding: 7%;
          text-decoration: none;
          font-size: 1vw;
          color: #1c4b6a;
          display: block;
      }

      .sidebar img {
      width: 100%;
      height: auto;
      }

      .sidebar a:hover {
          background-color: #acc1e5;
      }


      .content {
          margin-left: 5%;
          padding: 7%;
      }

      .content a img {
        position: fixed;
        left: 1%;
        top: 1%;
        width: 7%;
        height: auto;
        z-index: 3;
        }

        body {
            background-image: url('images/Fondo3.png'); /* Reemplaza 'ruta-de-tu-imagen.jpg' con la ruta correcta de tu imagen */
            background-size: cover; /* Ajusta el tamaño de la imagen para cubrir todo el fondo */
            background-repeat: no-repeat; /* Evita que la imagen se repita */
            height: 100%;
            width: 100%;
            margin: 0;
            padding: 0;
            overflow: hidden; 
        }


        .count {
            font-size: 4vw;
            text-align: center;
            height: 0;
            margin-top: 10%; 
            width: 100%;

            position: fixed;
            display: flex;
            justify-content: center;
            align-items: center;
            top: 50%; 
            left: 50%; 
            transform: translate(-50%, -50%); 
            color: rgb(31, 39, 78);
                font-family: 'Arial', sans-serif; 
        }

        .empezar {
            font-size: 2.3vw;
            height: 0;
            margin-top: 22%; 
            width: 50%;

            position: fixed;
            display: flex;
            justify-content: center;
            align-items: center;
            top: 50%; 
            left: 50%;
            transform: translate(-50%, -50%); 
            color: rgb(255, 255, 255);
            font-family: 'Arial', sans-serif; 
            background-color: rgb(31, 39, 78);
        }

        .terminar {
            font-size: 2.3vw;
            height: 0;
            margin-top: 22%;  
            width: 50%;

            position: fixed;
            display: flex;
            justify-content: center;
            align-items: center;
            top: 50%; 
            left: 50%;
            transform: translate(-50%, -50%);
            color: rgb(255, 255, 255);
            font-family: 'Arial', sans-serif; 
            background-color: rgb(31, 39, 78);

        }

        .nopoder {
            font-size: 1.3vw;
            text-align: center;
            height: 9%;
            margin-top: 22%; 
            width: 40%;

            position: fixed;
            display: flex;
            justify-content: center;
            align-items: center;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: rgb(255, 255, 255);
            font-family: 'Arial', sans-serif; 
            background-color: rgb(31, 39, 78);
            padding: 20px;
        }


        .punto {
        font-size: 2.5vw;
        text-align: center;
        height: 0;
        margin-top: 1%;
        width: 2%;
   
        padding-top: 3%; 
        padding-right: 6.5%;
        padding-bottom: 2.5%;
        padding-left: 9%; 

        position: fixed;
        display: flex;
        justify-content: center;
        align-items: center;
        top: 10%;
        left: 75%;
        transform: translate(-45%, -40%);
        font-family: 'Arial', sans-serif;
        background-color: rgb(31, 39, 78);
        color: #fff;

        }

        .moneda-image {
            font-size: 2vw;
        text-align: center;
        height: 0;
        margin-top: 1%;
        width: 2%;


        position: fixed;
        display: flex;
        justify-content: center;
        align-items: center;
        top: 11%;
        left: 71.5%;
        transform: translate(-45%, -50%);
        font-family: 'Arial', sans-serif;

        color: #fff;
        z-index: 4;
   
        }

        .punto .contenido {
        flex: 1; 
        }

        .barra-de-progreso {
            height: 2%;
            margin-top: 21%; 
            width: 40%;

            position: fixed;
            display: flex;
            justify-content: center;
            align-items: center;
            top: 45%; /* Centrar verticalmente en todos los dispositivos */
            left: 50%; /* Centrar horizontalmente en todos los dispositivos */
            transform: translate(-50%, -50%); /* Centrar en la mitad de la pantalla */

            background-color: #ccc;
        }

        .barra-fondo {
        width: 100%;
        height: 100%;
        background-color: #f0f0f0;
        }

        .barra-avance {
        height: 100%;
        background-color: rgb(31, 39, 78);
        width: 0;
        transition: width 1s;
        }
 

        .slider-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin: 1%;
        margin-top: 53%;
        position: relative;
        left: 105%; 
        top: -70%;
        height:100%;
        width: 90%;
        transform: translateX(-50%); 
        
        }

        .blue-background {
            background: rgb(31, 39, 78);; 
            width: 30%;
            height: 100%; 
            position: absolute; 
            z-index: -1;

        }

    
        .duration-label {
            font-weight: bold;
            font-size: 1.1vw;
            color: #f0f0f0;
            margin-bottom: 2%;
 
        }

        .vertical-slider {
            writing-mode: bt-lr; 
            width: 300%;
            cursor: pointer;

            background: linear-gradient(to bottom, #ccc, #ccc);
            border: 1px solid #000;
            border-radius: 5px;
            transform: rotate(-90deg);
            margin-left: 5%;
            margin-right: 300%;
            margin-top: -12%;
            transform-origin: right center;
        }


        .slider-wrapper {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 18%;
        }


        .vertical-slider::-webkit-slider-thumb {
            appearance: none;
            width: 18%;
            height: auto;
            background: rgb(31, 39, 78);;
            border: 2px solid #fff;
            border-radius: 50%;
            cursor: pointer;
        }



        .mascotadespierta-image {
            max-width: 100%;
            width: auto;
            height: auto;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        .mascotadormida-image {
            max-width: 100%;
            width: auto;
            height: auto;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        .blanco-image {
            max-width: 100%;
            width: auto;
            height: auto;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: -4;
            width: 40%;
        }


        .message-block {
            position: fixed;
            top: 30%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 30%;
            height: 30%;
            background-color: rgb(144, 164, 208);
            border: 1px solid #1b1c47;
            display: flex;
            justify-content: center;
            align-items: center;

        }

        #message {
            font-size: 1.5vw;
            text-align: center;
            margin-top: 10%;

        }

        .nombreMascota {
            position: fixed;
            top: 62%;
            left:62%;
            transform: translate(-50%, -50%);
            font-size: 2vw;
            text-align: center;
            color: rgb(255, 255, 255);
            font-family: 'Arial', sans-serif; 
            background-color: rgb(31, 39, 78);
            z-index: 10;

        }

        .nombreUsuario {
            position: fixed;
            top: 106%;
            left: 70%;
            transform: translate(-50%, -50%);
            font-size: 1.3vw;
            text-align: center;
            color: rgb(255, 255, 255);
            font-family: 'Arial', sans-serif; 
            background-color: rgb(31, 39, 78);
            z-index: 10;

        }

        .logout{
            width: 100%;
            padding: 7%;
            font-size: 1.5vw;
            margin-top: 0;
            position: absolute;
            top: 55%;
            left: 68%;
            transform: translate(-32%, 120%);
            color: white; 
            border-radius: 5px;
            z-index: 88;
        }

        .sisales{
            font-size: 1vw;
            height: 100%;
            margin-top: 27%;
            width: 17%;

            position: fixed;
            display: flex;
            justify-content: center;
            align-items: center;
            top: 85%;
            left: 81%;
            transform: translate(-50%, -50%);
            color:  rgb(16, 21, 45);
            font-family: 'Arial', sans-serif; 
            font-weight: bold; 

        }

        @media screen and (max-width: 1920px) {
            .mascotadespierta-image,
            .mascotadormida-image{
                width: 20%;
            }
        }

        @media screen and (max-width: 600px) {
            .mascotadespierta-image,
            .mascotadormida-image {
                max-width: 15%;
            }
        }



                .parent {
        display: grid;
        grid-template-columns: repeat(8, 1fr);
        grid-template-rows: repeat(9, 1fr);
        grid-column-gap: 0px;
        grid-row-gap: 0px;
        }

        .div1 { grid-area: 1 / 1 / 10 / 2; }
        .div2 { grid-area: 2 / 7 / 3 / 8; }
        .div3 { grid-area: 2 / 3 / 8 / 7; }
        .div4 { grid-area: 8 / 4 / 9 / 6; }
        .div5 { grid-area: 8 / 6 / 9 / 8; }
        .div6 { grid-area: 2 / 7 / 8 / 8; }


  
  </style>
  </head>
    
  <body>

    <div class="parent">
        <div class="div1"> 
            <div class="content" >
                <!-- Contenido principal de tu página -->
                <a href="#" onclick="toggleSidebar()"><img src="images/logo.png" alt="Botón de menú"></a>
            </div>
            <div class="sidebar" id="sidebar">
                <a></a> <a></a>  <a></a> <a></a> <a></a> <a></a> <a></a> <a></a>
                <a href="#" onclick="checklist()"><img src="images/listaicono.png" alt="Icono Checklist"></a>
                <a href="#" onclick="mascota()"><img src="images/homeicono.png" alt="Icono Tienda"></a>
                <a href="#" onclick="cementerio()"><img src="images/Tumba.png" alt="Icono Cementerio"></a>
            </div>

        </div>
        <div class="div2">    
            <p class="moneda-image">Puntos:</p>           
            <div class="punto">
               <!-- <img src="images/Monedas.png" alt="Moneda" class="moneda-image"> -->
               
                <div class="puntostexto">
                    <p id="puntosTotales">00</p>
                </div>
            </div>
        </div>
        <div class="div3"> 
            <div class="slider-container">
                <div class="blue-background"></div> 
                <div class="duration-label">Duración: <span id="duracionLabel">25</span> minutos</div>
                <div class="slider-wrapper">
                    <input type="range" id="duracion" name="duracion" min="1" max="240" value="20" class="vertical-slider" oninput="updateDurationLabel()">
               </div>

            <div class="logout" >
                <form action="/logout?_method=DELETE" method="POST">
                    <button type="submit">Salir</button>
                  </form>
            </div>
            <p class="nombreUsuario" id="nombreUsuario">Usuario conectado: <%= user.name %></p>

        </div>
        <div class="div4">
            <div class="message-block" id="messageBlock" style="display: none">
                <p id="message">Mensaje inicial</p>
            </div>
            <p class="nombreMascota" id="MascotaNombre">Nombre</p>
            <img src="images/cruz.png" alt="Mascota dormida" class="mascotadormida-image" id="imagenMascotaDormida">
            <img src="images/cruz.png" alt="Mascota despierta" class="mascotadespierta-image" id="imagenMascotaDespierta">
            <img src="images/BlancoSet.png" alt="blanco-image" class="blanco-image" id="blanco-image">
            <div class="count" id="countdown"> 00:00</div>
            <div class="barra-de-progreso">
                <div class="barra-fondo">
                  <div class="barra-avance" id="barraAvance"></div>
                </div>
              </div>
            


        </div>
        <div class="div5"> 
            <div class="empezar" >
                <!-- Contenido principal de tu página -->
                <button id="startButton" onclick="startCountdown()">Empezar</button>
              </div>
              <div class="terminar" >
               <!-- Contenido principal de tu página -->
               <button id="terminarButton" onclick="terminarCountdown()">FINALIZAR</button>
             </div>
             <p class="nopoder" >Asigna una mascota para continuar</p>
        </div>
        <div class="div6"> 
            <p class="sisales" >Si actualizas las página, cierras la página o le das al botón de finalizar tu mascota morirá.</p>
        </div>
    </div>


    
</div>

<script>
    console.log('User ID index:', '<%= user.id %>');
    let userId = '<%= user.id %>';
    
    const messagesdescanso = [
    "Mensaje 1",
    "Mensaje 2",
    "Mensaje 3",
    "Mensaje 4",
    "Mensaje 5",
    ];

    const messageBlock = document.getElementById("messageBlock");
    const messageElement = document.getElementById("message");

    /*
    fetch(`/${userId}/puntos`, {
        method: 'DELETE',
    })
    .then(response => response.json())
    .then(data => {
        // Manejar la respuesta recibida después de eliminar todas las tareas
        console.log('Todas las tareas eliminadas:', data);
        // Puedes realizar cualquier otra operación después de eliminar todas las tareas
    })
    .catch(error => console.error('Error al eliminar todas las tareas:', error)); */


    fetch(`/${userId}/puntos`)
            .then(response => {
                if (!response.ok) {
                throw new Error(`Error de red: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Datos de puntos:', data);
                if (data === null) {
                    data = 0;
                } else {
                    // Convertir a número si no es null
                    //data = parseInt(data, 10);

                            
                    if (data.length > 0) {
                        const idPuntos = data[0]._id;
                        console.log('ID de los puntos para el userId:', idPuntos);
                    } else {                       
                        
                            fetch(`/${userId}/puntos`, {
                                method: 'POST', 
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                    body: JSON.stringify({
                                        userId: userId,
                                        puntosTotales: 0, 
                                    }),
                                })
                                .then(newResponse => {
                                    if (!newResponse.ok) {
                                         throw new Error(`Error al crear nuevos puntos: ${newResponse.status}`);
                                    }
                                        return newResponse.json();
                                })
                                .then(newData => {
                                    const newIdPuntos = newData._id;
                                    console.log('Se creó un nuevo conjunto de puntos. Nuevo ID:', newIdPuntos);

                                    // Fetch points after creating new points
                                    fetch(`/${userId}/puntos`)
                                        .then(response => response.json())
                                        .then(data => {
                                            // Manejar la lista de tareas recibida en 'data'
                                            console.log('Lista de tareas:', data);
                                            // Aquí puedes realizar cualquier otra operación con la lista de tareas
                                        })
                                        .catch(error => console.error('Error al obtener la lista de tareas:', error));
                                })

                                .catch(newError => {
                                        console.error('Error al crear nuevos puntos:', newError.message);

                                }); 

                            
                    }  
                    fetch(`/${userId}/puntos`)
                    .then(response => response.json())
                    .then(data => {            

                        if (data) {
                        var puntosTotales = data[0].puntosTotales;
                        document.getElementById("puntosTotales").textContent = puntosTotales < 10 ? '0' + puntosTotales : puntosTotales;
                        } else {
                            puntosTotales = 0; 
                        }
                        
                    })
                    .catch(error => console.error('Error al obtener la lista de tareas:', error));


                }
        
            })



    

    function getRandomMessage() {
    const randomIndex = Math.floor(Math.random() * messagesdescanso.length);
    return messagesdescanso[randomIndex];
    }

    function updateMessage() {
        const newMessage = getRandomMessage();
        messageElement.textContent = newMessage;
    }

    //updateMessage();
    //despierta.style.display = "none"; 
    //dormida.style.display = "block"; 


    fetch(`/${userId}/mascotaprincipal`)
    .then(response => {
        if (!response.ok) {
            throw new Error(`Network error: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        // Check if there is no information for the userId
        if (Object.keys(data).length === 0) {

            const postData = {
                    userId: userId,
                    nombrePrincipal:  'Nombre', 
                    imagenPrincipal:  'images/cruz.png',
                    segundaImagen:  'images/cruz.png',
            };

            document.getElementById('imagenMascotaDespierta').src = 'images/cruz.png';
            document.getElementById('imagenMascotaDormida').src = 'images/cruz.png';
            document.getElementById('MascotaNombre').textContent = '';

            console.log("User: " + userId + " Nombre: " + postData.nombrePrincipal + " Imagen: " + postData.imagenPrincipal);

                    // Continúa con el código para enviar la solicitud al servidor aquí
                    
                    fetch(`/${userId}/mascotaprincipal`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(postData),
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Failed to create main mascot: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(newMascotData => {
                        // Handle the response after creating the main mascot
                        console.log('Main mascot created:', newMascotData);
                    })
                    .catch(error => {
                        console.error('Error creating main mascot:', error.message);
                    });



            // Make a POST request to create a main mascot
            
 
            //console.log("Imagen despierto if: " + data[0].imagenPrincipal);
            
        } else {
            
            console.log("Imagen despierto else: " + data[0].imagenPrincipal);
            document.getElementById('imagenMascotaDespierta').src = data[0].imagenPrincipal;
            document.getElementById('imagenMascotaDormida').src = data[0].segundaImagen;
            document.getElementById('MascotaNombre').textContent = data[0].nombrePrincipal;
        }
    })
    .catch(error => {
        console.error('Error fetching main mascot data:', error.message);
    });



     function toggleSidebar() {
          var sidebar = document.getElementById('sidebar');
          if (sidebar.style.left === '0px') {
              sidebar.style.left = '-250px';
          } else {
              sidebar.style.left = '0px';
          }
      }

    var countdown;
    var puntosTotales = 0;
    var cicloIniciado = false;
    
    //var puntosTotalesGuardados = localStorage.getItem("puntosTotales"); //

    
    var despierta = document.getElementById("imagenMascotaDespierta");
    var dormida = document.getElementById("imagenMascotaDormida");
    despierta.style.display = "block"; 
    dormida.style.display = "none";

    var terminar = document.getElementById("terminarButton");
    terminar.style.display = "none";
    var empezar = document.getElementById("startButton");
    empezar.style.display = "block";


    var sisales = document.querySelector(".sisales");
    sisales.style.display = "none";




    var nopoder = document.querySelector(".nopoder");


    //var savedDisplayValue = localStorage.getItem("displayValue");  ///

    fetch(`/${userId}/displayValue`)
            .then(response => {
                if (!response.ok) {
                throw new Error(`Error de red: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Datos de displayValue:', data);
                if (data === null) {
                    data = 0;
                } else {
                    // Convertir a número si no es null
                    //data = parseInt(data, 10);

                    
                    if (data.length > 0) {
                        const idPuntos = data[0]._id;
                        console.log('ID de los displayValue para el userId:', idPuntos);
                        var savedDisplayValue = data[0].displayValue;
                        if (savedDisplayValue) {
                                   console.log("Valor display existe: " + savedDisplayValue)
                                    var nopoder = document.querySelector(".nopoder");
                                    nopoder.style.display = savedDisplayValue;
                                    }else{
                                        nopoder.style.display = "none";
                                    }
                        } else {                       
                            
                            fetch(`/${userId}/displayValue`, {
                                method: 'POST', 
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                    body: JSON.stringify({
                                        userId: userId,
                                        displayValue: "none", 
                                    }),
                                })
                                .then(newResponse => {
                                    if (!newResponse.ok) {
                                         throw new Error(`Error al crear nuevos displayValue: ${newResponse.status}`);
                                    }
                                        return newResponse.json();
                                })
                                .then(newData => {
                                        const newIdPuntos = newData._id;
                                        console.log('Se creó un nuevo conjunto de displayValue. Nuevo ID:', newIdPuntos);

                                })
                                .catch(newError => {
                                        console.error('Error al crear nuevos displayValue:', newError.message);

                                }); 

                                fetch(`/${userId}/displayValue`)
                                .then(response => response.json())
                                .then(data => {
                                    // Manejar la lista de tareas recibida en 'data'
                                    console.log('Lista de displayValue:', data);

                                    savedDisplayValue = data[0].displayValue;
                                    if (savedDisplayValue == "none") {
                                    var nopoder = document.querySelector(".nopoder");
                                    nopoder.style.display = savedDisplayValue;
                                    }else{
                                        nopoder.style.display = "block";
                                    }
                                })
                                .catch(error => console.error('Error al obtener la lista de displayValue:', error));

                            
                    }  



                }
        
            })



    //sidebar
    function ocultarSidebar() {
        var logoButton = document.querySelector('.content a img');
        logoButton.style.display = 'none';

        var sidebar = document.querySelector('.sidebar');
        var elementosSidebar = sidebar.children;

        for (var i = 0; i < elementosSidebar.length; i++) {
            var elemento = elementosSidebar[i];
            elemento.style.display = 'none';
        }

        
    }

    function mostrarSidebar() {
        var logoButton = document.querySelector('.content a img');
        logoButton.style.display = 'block';

        var sidebar = document.querySelector('.sidebar');
        var elementosSidebar = sidebar.children;

        for (var i = 0; i < elementosSidebar.length; i++) {
            var elemento = elementosSidebar[i];
            elemento.style.display = 'block';
        }
    }

    var empezarcoundown = false;
  
     //


    /*
    if (puntosTotalesGuardados) { 
    puntosTotales = parseInt(puntosTotalesGuardados, 10);
    // Actualiza el texto en el elemento de puntos totales
    document.getElementById("puntosTotales").textContent = puntosTotales < 10 ? '0' + puntosTotales : puntosTotales;
    } else {
        puntosTotales = 0; // Inicializa la variable si no hay puntos almacenados
    } */

    //var valorBarraAvance = localStorage.getItem("barraAvance"); //
    
    fetch(`/${userId}/barraAvance`)
            .then(response => {
                if (!response.ok) {
                throw new Error(`Error de red: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Datos de barraAvance:', data);
                if (data === null) {
                    data = 0;
                } else {
                    // Convertir a número si no es null
                    //data = parseInt(data, 10);

                            
                    if (data.length > 0) {
                        const idPuntos = data[0]._id;
                        console.log('ID de los barraAvance para el userId:', idPuntos);

                    } else {                       
                        
                            fetch(`/${userId}/barraAvance`, {
                                method: 'POST', 
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                    body: JSON.stringify({
                                        userId: userId,
                                        barraAvance: "100", 
                                    }),
                                })
                                .then(newResponse => {
                                    if (!newResponse.ok) {
                                         throw new Error(`Error al crear nuevos barraAvance: ${newResponse.status}`);
                                    }
                                        return newResponse.json();
                                })
                                .then(newData => {
                                        const newIdPuntos = newData._id;
                                        console.log('Se creó un nuevo conjunto de barraAvance. Nuevo ID:', newIdPuntos);

                                })
                                .catch(newError => {
                                        console.error('Error al crear nuevos displayValue:', newError.message);

                                }); 

                                fetch(`/${userId}/barraAvance`)
                                .then(response => response.json())
                                .then(data => {
                                    // Manejar la lista de tareas recibida en 'data'
                                    console.log('Lista de barraAvance:', data);
                                    valorBarraAvance=  data[0].barraAvance;     
                                        if (valorBarraAvance !== null) {
                                        barraAvance.style.width = valorBarraAvance;
                                        }
                                })
                                .catch(error => console.error('Error al obtener la lista de displayValue:', error));

                            
                    }  



                }
        
            })






    function updateDurationLabel() {
            var duracionLabel = document.getElementById("duracionLabel");
            var duracionInput = document.getElementById("duracion");
            duracionLabel.textContent = duracionInput.value;
        }

        
    function startCountdown() {
        var timeLeft = 0; // Duración en segundos de la cuenta atrás
        var pomSet = 1500; //Duración en segundos de la cuenta atrás del set.                                              Cambiar
        var descanso1 = 300 //Duración del descanso.                                                                      Cambiar
        var descanso2 = 1800 //Duración del descanso.  
        var numerosetrealizados = -1;
        
        var segundostotalesInsertados = parseInt(document.getElementById("duracion").value);
        //segundostotalesInsertados = segundostotalesInsertados * 60; 
        var segundostotales = parseInt(document.getElementById("duracion").value);      
        //segundostotales = segundostotales * 60; 
        var slider = document.getElementById("duracion");
        var valorActualSlider = parseInt(slider.value, 10);
        
        
        var descansodesactivado = true;                                              
        var display = document.getElementById('countdown');

        
        dormida.style.display = "block"; 
        despierta.style.display = "none"; 
        terminar.style.display = "block";
        empezar.style.display = "none";
        sisales.style.display = "block";

        ocultarSidebar();
        empezarcoundown = true;

        window.addEventListener('beforeunload', function (e) {
            if(empezarcoundown){
                terminarCountdown();
            window.location.href = 'cementerio.ejs';
            }
        }); 


 

        function updateDisplay() {             
              
        var minutes = Math.floor(timeLeft / 60);
        var seconds = timeLeft % 60;
        display.textContent = '' + (minutes < 10 ? '0' : '') + minutes + ':' + (seconds < 10 ? '0' : '') + seconds;
 
        }

        
        //var barraAvance = document.getElementById("barraAvance"); 

        function actualizarBarraDeProgreso() {
        var porcentaje = (segundostotales / segundostotalesInsertados) * 100;
        barraAvance.style.width = porcentaje + "%";
        }



        // Función para manejar la cuenta regresiva
        function countdown() {
            barraAvance.style.width = "100%";
           //localStorage.setItem("barraAvance", "100"); //
           fetch(`/${userId}/barraAvance`)
                            .then(response => response.json())
                            .then(datap => {
                                let idbarraAvance = datap[0]._id;
                                let userId = '<%= user.id %>';

                                const dataToUpdate = {
                                    userId: userId,
                                    barraAvance: "100" ,
                                };

                                fetch(`/${userId}/puntos/${idbarraAvance}`, {
                                            method: 'PUT',
                                            headers: {
                                                'Content-Type': 'application/json',
                                            },
                                            body: JSON.stringify(dataToUpdate),
                                            })
                                            .then(response => {
                                                if (!response.ok) {
                                                throw new Error(`Error del servidor: ${response.status} - ${response.statusText}`);
                                                }
                                                return response.json();
                                            })
                                            .then(updatedData => {
                                                console.log('Response JSON:', updatedData);
                                                // Handle the updated data as needed
                                            })
                                            .catch(error => {
                                                console.error('Error al realizar la solicitud:', error);
                                            });                           
                               
                            })
                            .catch(error => console.error('Error al obtener la lista de tareas:', error));

           terminar.style.display = "block";
           empezar.style.display = "none";
           sisales.style.display = "block";

           





            var timer = setInterval(function () {
                updateDisplay();
                actualizarBarraDeProgreso();
                

                if (timeLeft === 0) {
                    if ( descansodesactivado) {
                        messageBlock.style.display = "none";
                        if (cicloIniciado) {
                            // Suma un punto solo si el ciclo ya ha comenzado
                            fetch(`/${userId}/puntos`)
                            .then(response => response.json())
                            .then(datap => {
                                let idPuntos = datap[0]._id;
                                let userId = '<%= user.id %>';

                                if (!idPuntos) {
                                    throw new Error('No se encontró un ID en los datos de puntos');
                                }
                                
                                const puntossuma = datap[0].puntosTotales + 1;
                                console.log("Suma de los puntos:" + puntossuma);

                                const dataToUpdate = {
                                    userId: userId,
                                    puntosTotales: puntossuma ,
                                };

                                
                                document.getElementById("puntosTotales").textContent = puntossuma < 10 ? '0' +puntossuma : puntossuma;       
                                /*                         
                                puntosTotales++;
                                document.getElementById("puntosTotales").textContent = puntosTotales < 10 ? '0' + puntosTotales : puntosTotales; ///
                                localStorage.setItem("puntosTotales", puntosTotales);  */

                                fetch(`/${userId}/puntos/${idPuntos}`, {
                                            method: 'PUT',
                                            headers: {
                                                'Content-Type': 'application/json',
                                            },
                                            body: JSON.stringify(dataToUpdate),
                                            })
                                            .then(response => {
                                                if (!response.ok) {
                                                throw new Error(`Error del servidor: ${response.status} - ${response.statusText}`);
                                                }
                                                return response.json();
                                            })
                                            .then(updatedData => {
                                                console.log('Response JSON:', updatedData);
                                                // Handle the updated data as needed
                                            })
                                            .catch(error => {
                                                console.error('Error al realizar la solicitud:', error);
                                            });                           
                               
                            })
                            .catch(error => console.error('Error al obtener la lista de tareas:', error));

                        } else {
                            cicloIniciado = true; // Marca el inicio del ciclo
                        }
                        numerosetrealizados++;
                        descansodesactivado = false;
                        timeLeft = pomSet;
                        console.log("Número de sets terminados: " + numerosetrealizados); 

                    } else {
                        // Inicio del ciclo de descanso
                        messageBlock.style.display = "block";
                        updateMessage();
                        descansodesactivado = true;

                        if (numerosetrealizados === 4) {
                            // Comienza el segundo ciclo de descanso (descanso2)
                            numerosetrealizados = 0; // Reinicia el número de sets realizados
                            timeLeft = descanso2;
                            console.log("¡Segundo ciclo de descanso!");
                        } else {
                                // Inicio del ciclo de descanso normal (descanso1)
                            timeLeft = descanso1;
                        }
                        //timeLeft = descanso1;
                    }
                }

                if (segundostotales === 0) {
                        clearInterval(timer); // Detén el temporizador cuando se agoten los segundos totales
                        console.log("Cuenta atrás finalizada.");
                        display.textContent = '' + (0 < 10 ? '0' : '') + 0 + ':' + (0 < 10 ? '0' : '') + 0;
                        segundostotales= 0;
                        descansodesactivado = true;
                        numerosetrealizados = -1;
                        cicloIniciado = false; 
                        porcentaje = 100;
                        barraAvance.style.width  = porcentaje + "%";
                        document.getElementById("duracionLabel").textContent = valorActualSlider;
                        
                        despierta.style.display = "block"; 
                        dormida.style.display = "none"; 
                        terminar.style.display = "none";
                        empezar.style.display = "block";
                        sisales.style.display = "none";
                        mostrarSidebar();
                        empezarcoundown = false;

                }

                timeLeft--;
                segundostotales--;
                valorActualSlider--;
                slider.value = valorActualSlider;

            }, 1000);

        }


        //var valorBarraAvance = localStorage.getItem("barraAvance"); //
        fetch(`/${userId}/barraAvance`)
                            .then(response => response.json())
                            .then(datap => {
                                let idbarraAvance = datap[0]._id;
                                let userId = '<%= user.id %>';

                                if (!datap[0].barraAvance) {
                                        barraAvance.style.width = "100%";
                                        //localStorage.setItem("barraAvance", "100"); //
                                    

                                    const dataToUpdate = {
                                        userId: userId,
                                        barraAvance: "100" ,
                                    };

                                    fetch(`/${userId}/puntos/${idbarraAvance}`, {
                                                method: 'PUT',
                                                headers: {
                                                    'Content-Type': 'application/json',
                                                },
                                                body: JSON.stringify(dataToUpdate),
                                                })
                                                .then(response => {
                                                    if (!response.ok) {
                                                    throw new Error(`Error del servidor: ${response.status} - ${response.statusText}`);
                                                    }
                                                    return response.json();
                                                })
                                                .then(updatedData => {
                                                    console.log('Response JSON:', updatedData);
                                                    // Handle the updated data as needed
                                                })
                                                .catch(error => {
                                                    console.error('Error al realizar la solicitud:', error);
                                                });                           
                                }
                            })
                            .catch(error => console.error('Error al obtener la lista de tareas:', error));


        countdown();
            
    }

    /*
    var listaCementerio = JSON.parse(localStorage.getItem('CementerioElements')) || [];  ///
        window.onload = function () {
            // Obtener la lista local
            var listaCementerio = JSON.parse(localStorage.getItem('CementerioElements')) || [];  ////

            itemStore = 0;
            listaCementerio.forEach(function (element) {
                if (element.index > itemStore) {
                    itemStore = element.index;
                }
            });  

    }; */


    //var listaLocal = JSON.parse(localStorage.getItem('storeElements')) || [];
            /*
            var indiceAEliminar = -1;
            data.forEach(function (element, index) {
            if (element.nombre === nombreMascota) {
                indiceAEliminar = index;
                console.log("Se llega aqui");
            } */


    function eliminarMascota(nombreMascota) {
        fetch('/' + userId +'/mascotas')
        .then(response => response.json())
        .then(data => {
                /*Hacerlo aqui*/     
                const mascotaAEliminar = data.find(mascota => mascota.nombre === nombreMascota);

                if (mascotaAEliminar) {
                    const mascotaId = mascotaAEliminar._id;

                    fetch(`/${userId}/mascotas/${mascotaId}`, {
                    method: 'DELETE',
                    })
                    .then(response => {
                        if (!response.ok) {
                        throw new Error(`Error al borrar la mascota: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Mascota eliminada con éxito:', data);
                        // Puedes realizar acciones adicionales después de eliminar la mascota
                    })
                    .catch(error => {
                        console.error('Error al borrar la mascota:', error.message);
                    });

                }
        })
        .catch(error => console.error('Error al obtener la lista de tareas:', error));
        
        
    }




    function enviarCementerio() {
            // imagenPrincipalSrc
            // nombrePrincipalSrc 
                             
            //localStorage.setItem('imagenPrincipalCementerio', imagenPrincipalSrc); ///
            //localStorage.setItem('nombrePrincipalCementerio', nombrePrincipalSrc );  //
            //localStorage.setItem('fechaCementerio', fechaFormateada );  ///

            /*
            var nuevoElemento = {
                        imagenPrincipal: imagenPrincipalSrc,
                        nombre: nombrePrincipalSrc,
                        fechamuerte: fechaFormateada
            }; */

            //listaCementerio.push(nuevoElemento);

            

            //localStorage.setItem('CementerioElements', JSON.stringify( listaCementerio));
            fetch(`/${userId}/mascotaprincipal`)
                .then(response => {
                        if (!response.ok) {
                            throw new Error(`Error de red: ${response.status}`);
                        }
                        return response.json();
                        })
                .then(datap => {
                    
                        var fechaActual = new Date();
                        let userId = '<%= user.id %>';

                        // Formatea la fecha
                        var options = { year: 'numeric', month: 'long', day: 'numeric' };
                        var fechaFormateada = fechaActual.toLocaleDateString(undefined, options);

                        var nuevoElemento = {
                                userId: userId,
                                imagenPrincipal: datap[0].imagenPrincipal,                            
                                nombre: datap[0].nombrePrincipal,
                                fecha: fechaActual
                        };


                                    
                        fetch('/' + userId +'/muertos', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json',
                                        },
                                        body: JSON.stringify(nuevoElemento),
                                        })
                                        .then(response => response.json())
                                        .then(data => {
                                            console.log('Mascota muerta:', data);
                                            eliminarMascota(datap[0].nombrePrincipal)

                                            let idPrincipal = datap[0]._id;

                                            if (!idPrincipal) {
                                                    throw new Error('No se encontró un ID en los datos de puntos');
                                            }


                                            const dataToUpdate = {
                                                userId: userId,
                                                nombrePrincipal:  'Nombre', 
                                                imagenPrincipal:  'images/cruz.png',
                                                segundaImagen:  'images/cruz.png',
                                            };
                                                                
                                            fetch(`/${userId}/mascotaprincipal/${idPrincipal}`, {
                                                method: 'PUT',
                                                headers: {
                                                'Content-Type': 'application/json',
                                            },
                                                body: JSON.stringify(dataToUpdate),
                                            })
                                            .then(response => {
                                                if (!response.ok) {
                                                    throw new Error(`Error del servidor: ${response.status} - ${response.statusText}`);
                                                }
                                                    return response.json();
                                                })
                                                .then(updatedData => {
                                                    console.log('Response JSON:', updatedData);
                                                                
                                                })
                                                .catch(error => {
                                                    console.error('Error al realizar la solicitud:', error);
                                                });
                                        })
                                        .catch(error => console.error('Error al guardar la tarea:', error));

   
                                    
                    })
                    .catch(error => {
                            console.error('Error al obtener datos de puntos:', error.message);
                    }); 
           

            document.getElementById('imagenMascotaDespierta').src = "images/cruz.png";
            document.getElementById('imagenMascotaDormida').src = "images/cruz.png";
            document.getElementById('MascotaNombre').textContent = "";
            
            //localStorage.setItem('imagenPrincipal', "images/cruz.png"); ///
            //localStorage.setItem('segundaImagen', "images/cruz.png");   //
            //localStorage.setItem('nombrePrincipal', ""); ///

            nopoder.style.display = "block";
            //localStorage.setItem("displayValue", "block"); //
            
            fetch(`/${userId}/displayValue`)
                .then(response => response.json())
                .then(data => {                                   
                    console.log('Lista de displayValue:', data);
                    idPrincipal = data[0]._id;


                    const dataToUpdate = {
                      userId: userId,
                      displayValue:  "block", 

                     };

                    fetch(`/${userId}/displayValue/${idPrincipal}`, {
                        method: 'PUT',
                        headers: {
                        'Content-Type': 'application/json',
                    },
                        body: JSON.stringify(dataToUpdate),
                     })
                    .then(response => {
                        if (!response.ok) {
                           throw new Error(`Error del servidor: ${response.status} - ${response.statusText}`);
                        }
                            return response.json();
                    })
                    .then(updatedData => {
                        console.log('Response JSON:', updatedData);
                                                                
                    })
                    .catch(error => {
                        console.error('Error al realizar la solicitud:', error);
                    });

            })
            .catch(error => console.error('Error al obtener la lista de displayValue:', error));


            // Redirigir a otro HTML
            window.location.href = '/cementerio/' + userId ;
            


            
     }


     

    function terminarCountdown(){
        mostrarSidebar();
        enviarCementerio();
        
    }



</script>


<script>

    function checklist(){
      var userId = '<%= user.id %>';
    window.location.href = "/checklist/" + userId;
    }



    function mascota(){
      var userId = '<%= user.id %>';
      window.location.href = "/mascota/" + userId;

    }

    function cementerio(){
        var userId = '<%= user.id %>';
      window.location.href = "/cementerio/" + userId;

    }




</script>
    <!--  <h1>Hello, world!</h1> -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
  </body>
</html>